#include "CRT.h"
#include "IOPort.h"

unsigned short* CRT::m_VideoMemory = (unsigned short *)(0xB8000 + 0xC0000000);
unsigned int CRT::m_CursorX = 0;
unsigned int CRT::m_CursorY = 0;
unsigned int variable = TTy::size;
unsigned int CRT::m1_CursorX = variable;
unsigned int CRT::m1_CursorY = 0;

char* CRT::m_Position = 0;
char* CRT::m_BeginChar = 0;

char* CRT::m1_Position = 0;
char* CRT::m1_BeginChar = 0;

unsigned int CRT::ROWS = 18;

void CRT::CRTStart(TTy* pTTy,int ntty)
{
	char ch;
		if ( 0 == CRT::m_BeginChar)
	{
		m_BeginChar = pTTy->t_outq.CurrentChar();
	}

	if ( 0 == m_Position )
	{
		m_Position = m_BeginChar;
	}

	 if ( 0 == CRT::m1_BeginChar)
		{
			m1_BeginChar = pTTy->t_outq.CurrentChar();
		}

	if ( 0 == m1_Position )
		{
			m1_Position = m1_BeginChar;
		}

	ClearScreen(ntty);

	while ( (ch = pTTy->t_outq.GetChar()) != TTy::GET_ERROR )
	{
		switch (ch)
		{
		case '\n':
			NextLine(ntty);
			if(ntty == 0)
			{
				CRT::m_BeginChar = pTTy->t_outq.CurrentChar();
				m_Position = CRT::m_BeginChar;
			}
			else{
					CRT::m1_BeginChar = pTTy->t_outq.CurrentChar();
					m1_Position = CRT::m1_BeginChar;
			}
			break;

		case 0x15:
			//del_line();
			break;

		case '\b':
			if(ntty == 0)
			{	 if ( m_Position != CRT::m_BeginChar )
				{
					BackSpace(ntty);
					m_Position--;
				}
			}
			else{
				 if ( m1_Position != CRT::m1_BeginChar )
							{
								BackSpace(ntty);
								m1_Position--;
							}
			}
			break;

		case '\t':
			Tab(ntty);
			if(ntty == 0)
				m_Position++;
			else
				m1_Position++;
			break;

		default:	/* 在屏幕上回显普通字符 */
			WriteChar(ch,ntty);
			if(ntty==0)
				m_Position++;
			else
				m1_Position++;
			break;
		}
	}
}

void CRT::MoveCursor(unsigned int col, unsigned int row)
{
	if ( (col < 0 || col >= CRT::COLUMNS) || (row < 0 || row >= CRT::ROWS) )
	{
		return;
	}

	/* 计算光标偏移量 */
	unsigned short cursorPosition = row * CRT::COLUMNS + col;

	/* 选择 r14和r15寄存器，分别为光标位置的高8位和低8位 */
	IOPort::OutByte(CRT::VIDEO_ADDR_PORT, 14);
	IOPort::OutByte(CRT::VIDEO_DATA_PORT, cursorPosition >> 8);
	IOPort::OutByte(CRT::VIDEO_ADDR_PORT, 15);
	IOPort::OutByte(CRT::VIDEO_DATA_PORT, cursorPosition & 0xFF);
}

void CRT::NextLine(int ntty)
{if(ntty == 0)
	{	m_CursorX = 0;
		m_CursorY += 1;

	/* 超出最大行数 */
	if ( m_CursorY >= CRT::ROWS )
	{
		m_CursorY = 0;
		ClearScreen(ntty);
	}
	MoveCursor(m_CursorX, m_CursorY);
	}
else
{	m1_CursorX = variable;
	m1_CursorY += 1;

	/* 超出最大行数 */
	if ( m1_CursorY >= CRT::ROWS )
	{
	m1_CursorY = 0;
	ClearScreen(ntty);
	}
	MoveCursor(m1_CursorX, m1_CursorY);
	}
}

void CRT::BackSpace(int ntty)
{
	if(ntty == 0)
	{		m_CursorX--;
		/* 移动光标，如果要回到上一行的话 */
		if ( m_CursorX  == -1)
		{
			m_CursorX = variable- 1;
			m_CursorY--;

		if ( m_CursorY < 0 )
		{
			m_CursorY = 0;
		}
	}
	MoveCursor(m_CursorX, m_CursorY);
	/* 在光标所在位置填上空格 */
	m_VideoMemory[m_CursorY * COLUMNS + m_CursorX] = ' ' | CRT::COLOR;
	}
else{
	m1_CursorX--;
	/* 移动光标，如果要回到上一行的话 */
	if ( m1_CursorX < variable)
	{
		m1_CursorX = CRT::COLUMNS - 1;
		m1_CursorY--;
		if ( m1_CursorY < 0 )
		{
			m1_CursorY = 0;
		}
	}
	MoveCursor(m1_CursorX, m1_CursorY);
	/* 在光标所在位置填上空格 */
	m_VideoMemory[m1_CursorY * COLUMNS + m1_CursorX] = ' ' | CRT::COLOR;
	}
}

void CRT::Tab(int ntty)
{	if(ntty == 0)
	{
		m_CursorX &= 0xFFFFFFF8;	/* 向左对齐到前一个Tab边界 */
		m_CursorX+=8;
	if ( m_CursorX >= variable)
			NextLine(ntty);
	else
		MoveCursor(m_CursorX, m_CursorY);
	}
	else{
			m1_CursorX &= 0xFFFFFFF8;	/* 向左对齐到前一个Tab边界 */
			m1_CursorX+=8;
		if ( m1_CursorX >= CRT::COLUMNS )
				NextLine(ntty);
		else
				MoveCursor(m1_CursorX, m1_CursorY);
}
}
void CRT::WriteChar(char ch,int ntty)
{
	if(ntty == 0)
	{
		m_VideoMemory[m_CursorY * CRT::COLUMNS + m_CursorX] = (unsigned char) ch | CRT::COLOR;
		m_CursorX++;

	if ( m_CursorX >=variable )
	{
		NextLine(ntty);
	}
	MoveCursor(m_CursorX, m_CursorY);
	}
	else
	{
		m_VideoMemory[m1_CursorY * CRT::COLUMNS + m1_CursorX] = (unsigned char) ch | CRT::COLOR;
			m1_CursorX++;
			if ( m1_CursorX >= CRT::COLUMNS )
			{
				NextLine(ntty);
			}
			MoveCursor(m1_CursorX, m1_CursorY);
	}
}

void CRT::ClearScreen(int ntty)
{
	int  i = 0;
	int j = 0;
	int h = variable;
	int m =  h*ntty;
	int n = m+h;
	for(j = 0; j<ROWS;j++)
	{	for ( i = m; i < n; i++ )
		{
			m_VideoMemory[j*COLUMNS+i] = (unsigned short)' ' | CRT::COLOR;
		}
	}
}

void CRT::FreshCurse(int ntty)
{
	if(ntty == 0)
	{	MoveCursor(m_CursorX, m_CursorY);
		m_VideoMemory[m_CursorY * COLUMNS + m_CursorX] = ' ' | CRT::COLOR;
	}
	else
	{	MoveCursor(m1_CursorX, m1_CursorY);
		m_VideoMemory[m1_CursorY * COLUMNS + m1_CursorX] = ' ' | CRT::COLOR;
	}

}
